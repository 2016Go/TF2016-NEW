{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red63\green110\blue116;\red170\green13\blue145;
\red38\green71\blue75;\red46\green13\blue110;\red28\green0\blue207;\red100\green56\blue32;\red196\green26\blue22;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\tx864\pardeftab864\pardirnatural\partightenfactor0

\f1\fs36 \AppleTypeServices\AppleTypeServicesF1441793 \cf2 \CocoaLigature0 //move\cf0 \
    \cf3 MapInfoPath\cf0 * _pathInfo;\
    \cf3 CCPoint\cf0  _pos, _suv;\
    \cf4 float\cf0  _dist;\
    \cf4 int\cf0  _path, _sizePP, _pathDirection, _nextPosIdx;
\f0\fs24 \AppleTypeServices \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx864\pardeftab864\pardirnatural\partightenfactor0

\f1\fs36 \AppleTypeServices\AppleTypeServicesF1441793 \cf2 \CocoaLigature0 //move\cf0 \
\cf4 const\cf0  \cf3 CCPoint\cf0 & \cf3 Enemy\cf0 ::getPos()\{\
    \cf4 return\cf0  \cf3 _pos\cf0 ;\
\}\
\
\cf4 void\cf0  \cf3 Enemy\cf0 ::setPos(\cf4 const\cf0  \cf3 CCPoint\cf0 & pos, \cf4 int\cf0  nextpp)\{\
    \cf3 _pos\cf0 =pos;\
    \cf3 _nextPosIdx\cf0 =nextpp;\
    \cf3 _dist\cf0 =\cf5 ccpDistance\cf0 (\cf3 _pathInfo\cf0 ->\cf3 m_pp\cf0 [\cf6 _nextPosIdx\cf0 ],\cf3 _pos\cf0 );\
    \cf3 _suv\cf0 =\cf5 ccpNormalize\cf0 (\cf5 ccpSub\cf0 (\cf3 _pathInfo\cf0 ->\cf3 m_pp\cf0 [\cf6 _nextPosIdx\cf0 ],\cf3 _pos\cf0 ));\
\}\
\
\cf4 float\cf0  \cf3 Enemy\cf0 ::getWayPercent()\{\
    \cf4 if\cf0 (\cf6 fabs\cf0 (\cf3 _pathInfo\cf0 ->\cf3 m_totalDis\cf0 )<\cf7 0.00001f\cf0 )\{\
        \cf4 return\cf0  \cf7 0\cf0 ;\
    \}\
    \cf4 return\cf0  (\cf3 _pathInfo\cf0 ->\cf3 m_ppDis\cf0 [\cf6 _nextPosIdx\cf0 ]-\cf3 _pathDirection\cf0 *\cf3 _dist\cf0 )/\cf3 _pathInfo\cf0 ->\cf3 m_totalDis\cf0 ;\
\}\
\
\cf4 int\cf0  \cf3 Enemy\cf0 ::getPath()\{\
    \cf4 return\cf0  \cf3 _path\cf0 ;\
\}\
\
\cf4 int\cf0  \cf3 Enemy\cf0 ::getNextPosIdx()\{\
    \cf4 return\cf0  \cf3 _nextPosIdx\cf0 ;\
\}\
\
\cf4 const\cf0  \cf3 CCPoint\cf0  \cf3 Enemy\cf0 ::getUnitSpeed()\{\
    \cf4 return\cf0  \cf5 ccpMult\cf0 (\cf3 _suv\cf0 ,\cf3 _speed\cf0 );\
\}\
\
\cf4 void\cf0  \cf3 Enemy\cf0 ::loadPathGo(\cf4 int\cf0  path)\{\
    \cf3 _path\cf0 =path;\
    \cf3 _pathDirection\cf0 =\cf7 1\cf0 ;\
    \cf3 _nextPosIdx\cf0 =\cf7 0\cf0 ;\
    \cf4 if\cf0 (\cf4 NULL\cf0 ==(\cf3 _pathInfo\cf0 =\cf3 MapManager\cf0 ::\cf5 getInstance\cf0 ()->\cf5 getMapPath\cf0 (\cf3 _path\cf0 )))\{\
        \cf8 NGLOG\cf0 (\cf9 "Enemy::loadPathGo get null path"\cf0 );\
        \cf5 exitGameNow\cf0 ();\
    \}\
    \cf3 _sizePP\cf0 =\cf4 int\cf0 (\cf3 _pathInfo\cf0 ->\cf3 m_pp\cf0 .\cf6 size\cf0 ());\
    \cf5 nextPP\cf0 ();\
\}\
\
\cf4 bool\cf0  \cf3 Enemy\cf0 ::nextPP()\{\
    \cf3 _pos\cf0 =\cf3 _pathInfo\cf0 ->\cf3 m_pp\cf0 [\cf6 _nextPosIdx\cf0 ];\
    \cf4 if\cf0 (\cf3 _nextPosIdx\cf0 +\cf3 _pathDirection\cf0 <\cf7 0\cf0  || \cf3 _nextPosIdx\cf0 +\cf3 _pathDirection\cf0 >=\cf3 _sizePP\cf0 )\{\
        \cf3 _dist\cf0 =\cf7 0\cf0 ;\
        \cf4 return\cf0  \cf4 false\cf0 ;\
    \}\
    \cf3 _nextPosIdx\cf0 +=\cf3 _pathDirection\cf0 ;\
    \cf3 _dist\cf0 =\cf5 ccpDistance\cf0 (\cf3 _pathInfo\cf0 ->\cf3 m_pp\cf0 [\cf6 _nextPosIdx\cf0 ],\cf3 _pos\cf0 );\
    \cf3 _suv\cf0 =\cf5 ccpNormalize\cf0 (\cf5 ccpSub\cf0 (\cf3 _pathInfo\cf0 ->\cf3 m_pp\cf0 [\cf6 _nextPosIdx\cf0 ],\cf3 _pos\cf0 ));\
    \cf4 return\cf0  \cf4 true\cf0 ;\
\}\
\
\cf4 bool\cf0  \cf3 Enemy\cf0 ::reversePath()\{\
    \cf3 _pathDirection\cf0 *=-\cf7 1\cf0 ;\
    \cf4 return\cf0  \cf5 nextPP\cf0 ();\
\}\
\
\cf4 void\cf0  \cf3 Enemy\cf0 ::rewindPP()\{\
    \cf3 _pathDirection\cf0 *=-\cf7 1\cf0 ;\
    \cf3 _nextPosIdx\cf0 +=\cf3 _pathDirection\cf0 ;\
    \cf4 if\cf0 (\cf3 _nextPosIdx\cf0 <\cf7 0\cf0 )\{\
        \cf3 _nextPosIdx\cf0 =\cf7 0\cf0 ;\
    \}\
    \cf4 if\cf0 (\cf3 _nextPosIdx\cf0 >=\cf3 _sizePP\cf0 )\{\
        \cf3 _nextPosIdx\cf0 =\cf3 _sizePP\cf0 -\cf7 1\cf0 ;\
    \}\
    \cf3 _dist\cf0 =\cf5 ccpDistance\cf0 (\cf3 _pathInfo\cf0 ->\cf3 m_pp\cf0 [\cf6 _nextPosIdx\cf0 ],\cf3 _pos\cf0 );\
    \cf3 _suv\cf0 =\cf5 ccpNormalize\cf0 (\cf5 ccpSub\cf0 (\cf3 _pathInfo\cf0 ->\cf3 m_pp\cf0 [\cf6 _nextPosIdx\cf0 ],\cf3 _pos\cf0 ));\
\}\
\
\cf4 void\cf0  \cf3 Enemy\cf0 ::arrival()\{\
    \cf4 int\cf0  punishHP;\
    \cf3 _punishHP\cf0 ->\cf5 get\cf0 (&punishHP);\
    \cf3 GameManager\cf0 ::\cf5 getInstance\cf0 ()->\cf5 updateGameHP\cf0 (&punishHP);\
    \cf3 StrategyManager\cf0 ::\cf5 getInstance\cf0 ()->\cf5 enemyArrived\cf0 (\cf3 _type\cf0 );\
    \cf4 return\cf0 ;\
\}\
\
\cf4 bool\cf0  \cf3 Enemy\cf0 ::moveUpdate(\cf4 float\cf0  dt)\{\
    \cf4 float\cf0  move, remainder;\
    \cf4 int\cf0  animZ=\cf8 BATTLEFIELDZORDER\cf0 (_pos.y);\
    \cf3 _anim\cf0 ->\cf5 reorderZ\cf0 (animZ);\
    \cf4 if\cf0 (\cf6 fabs\cf0 (\cf3 _speed\cf0 )>\cf7 0.00001f\cf0 )\{\
        \cf4 if\cf0 (\cf3 _speed\cf0 <\cf7 0\cf0 )\{\
            \cf5 rewindPP\cf0 ();\
        \}\
        move=\cf6 fabs\cf0 (\cf3 _speed\cf0 *dt);\
        \cf4 while\cf0 ((remainder=(move-\cf3 _dist\cf0 ))>=\cf7 0\cf0 )\{\
            move=remainder;\
            \cf4 if\cf0 (!\cf5 nextPP\cf0 ())\{\
                \cf4 break\cf0 ;\
            \}\
        \}\
        \cf4 if\cf0 (remainder>=\cf7 0\cf0 )\{\
            \cf4 if\cf0 (\cf3 _speed\cf0 >\cf7 0\cf0 )\{\
                \cf5 arrival\cf0 ();\
                \cf4 return\cf0  \cf4 false\cf0 ;\
            \}\
        \}\cf4 else\cf0 \{\
            \cf3 _pos\cf0 =\cf5 ccpAdd\cf0 (\cf5 ccpMult\cf0 (\cf3 _suv\cf0 ,move),\cf3 _pos\cf0 );\
            \cf3 _dist\cf0 =-remainder;\
        \}\
        \cf3 _animDirection\cf0 =(\cf3 _suv\cf0 .\cf3 x\cf0 <\cf7 0\cf0 )?\cf7 4\cf0 :\cf7 0\cf0 ;\
        \cf5 playAnim\cf0 (\cf3 _move2Anim\cf0 ?\cf5 BAT_MOVE2\cf0 :\cf5 BAT_MOVE1\cf0 ,-\cf7 1\cf0 ,\cf3 _animDirection\cf0 );\
        \cf4 if\cf0 (\cf3 _speed\cf0 <\cf7 0\cf0 )\{\
            \cf5 rewindPP\cf0 ();\
        \}\
    \}\
    \cf4 return\cf0  \cf4 true\cf0 ;\
\}\
\
\cf4 const\cf0  \cf3 CCPoint\cf0  \cf3 Enemy\cf0 ::getSUV()\{\
    \cf4 return\cf0  \cf3 _suv\cf0 ;\
\}}